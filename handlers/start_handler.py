from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config_data.config import Config, load_config
from database import requests as rq
from database.models import User, Combination
from utils.error_handling import error_handler
from keyboards.start_keyboard import keyboard_start
from filter.admin_filter import check_super_admin

import logging

router = Router()
config: Config = load_config()
router.message.filter(F.chat.type == "private")


@router.message(CommandStart())
@error_handler
async def process_start_command_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.set_state(state=None)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—â–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"
        data_user = {"tg_id": message.from_user.id,
                     "name": username}
        if await check_super_admin(telegram_id=message.from_user.id):
            data_user = {"tg_id": message.from_user.id,
                         "name": username,
                         "role": rq.UserRole.admin}
        await rq.add_user(data=data_user)
    await message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü•∞\n'
                              '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ‚Ä¶')


@router.message(F.text == '–°–∏–ª–∞ —Å–æ—á–µ—Ç–∞–Ω–∏–π')
@error_handler
async def process_get_key_word(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_get_key_word: {message.chat.id}')
    await message.answer(text=f'–ó–∞–ø–∏—Å–∞–ª–∏ –Ω–∞ –ø–æ–¥–∫–æ—Ä–∫–µ, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–∑–±–æ—Ä–∞–º‚ö°')
    await message.answer(text='–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–æ—á–µ—Ç–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞—Ä–∫–∞–Ω–æ–≤, –≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º'
                              ' –∏ –ø—Ä—è–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –¥–≤—É—Ö –∫–∞—Ä—Ç –ø–æ –ø—Ä–∏–º–µ—Ä—É:'
                              ' ‚Äú–®—É—Ç + –°–∏–ª–∞‚Äù, ‚Äú–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞ + –ú–∏—Ä‚Äù –∏ —Ç.–¥.\n'
                              'P.S. –í—Å–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –±–∞–∑–æ–≤—ã–º–∏/–æ—Å–Ω–æ–≤–Ω—ã–º–∏, –ø—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è'
                              ' –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –ø—Ä–∏–æ–±—â–∞—Ç—å –∫ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º.')
    await rq.set_user_active(tg_id=message.from_user.id)


@router.message(F.text)
@error_handler
async def process_get_combination(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_get_combination: {message.chat.id}')
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if user.active == 'true':
        combinations: list[Combination] = await rq.get_cards()
        for combination in combinations:
            if combination.combination.lower() == message.text.lower():
                await message.answer_photo(photo=combination.photo_id,
                                           caption=f'<b>{combination.combination}</b>\n'
                                                   f'{combination.description}')
    else:
        await message.answer(text='–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.')
